/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Address;
import org.openapitools.model.AddressInfo;
import org.openapitools.model.AddressesInner;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-12T21:32:54.191+01:00[Europe/Berlin]")
@Validated
@Tag(name = "address", description = "the address API")
public interface AddressApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /address
     * Get a list of addresses
     *
     * @return Success! (status code 200)
     */
    @Operation(
        operationId = "addressGet",
        tags = { "address" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success!", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Address.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/addresses",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Address>> addressGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /address/{id}
     * Delete Address by ADID
     *
     * @param id  (required)
     * @return Successfully deleted the Address (status code 200)
     */
    @Operation(
        operationId = "addressIdDelete",
        tags = { "address" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted the Address")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/address/{id}"
    )
    default ResponseEntity<Void> addressIdDelete(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /address/{id}
     *
     * @param id  (required)
     * @return Success Response with Path Parameter (status code 200)
     */
    @Operation(
        operationId = "addressIdGet",
        tags = { "address" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success Response with Path Parameter", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AddressesInner.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/address/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<List<AddressesInner>> addressIdGet(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /address/{id}
     *
     * @param id  (required)
     * @param addressInfo  (optional)
     * @return Successfully changed data of address with adid: {adid} (status code 200)
     */
    @Operation(
        operationId = "addressIdPatch",
        tags = { "address" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully changed data of address with adid: {adid}")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/address/{id}",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addressIdPatch(
        @Parameter(name = "id", description = "", required = true) @PathVariable("id") Integer id,
        @Parameter(name = "AddressInfo", description = "") @Valid @RequestBody(required = false) AddressInfo addressInfo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /address
     * Add a new Person
     *
     * @param addressInfo  (optional)
     * @return Successfully added (status code 201)
     */
    @Operation(
        operationId = "addressPost",
        tags = { "address" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully added")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/address",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> addressPost(
        @Parameter(name = "AddressInfo", description = "") @Valid @RequestBody(required = false) AddressInfo addressInfo
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
